// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  bio           String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  links    Link[]
  Click    Click[]

  profileVisits ProfileVisit[] @relation("ProfileOwner")
  visitorVisits ProfileVisit[] @relation("Visitor")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Link {
  id        String   @id @default(cuid())
  title     String
  url       String // URL of the link
  platform  String? // Optional field (e.g., "Instagram", "YouTube")
  order     Int // Order of display
  isVisible Boolean  @default(true) // If the link is visible
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  clicks    Click[]
}

model ProfileVisit {
  id         String   @id @default(cuid())
  userId     String // The profile owner
  user       User     @relation("ProfileOwner", fields: [userId], references: [id])
  visitorId  String? // Optional: Track who visited the profile (if logged in)
  visitor    User?    @relation("Visitor", fields: [visitorId], references: [id])
  ipAddress  String?
  country    String?
  city       String?
  postalCode String?
  device     String?
  browser    String?
  referer    String?
  visitAt    DateTime @default(now()) // Time of visit
  clicks     Click[] // Relation to Click model
}

model Click {
  id           String       @id @default(cuid())
  linkId       String
  link         Link         @relation(fields: [linkId], references: [id])
  visitId      String
  profileVisit ProfileVisit @relation(fields: [visitId], references: [id])
  clickedAt    DateTime     @default(now())
  User         User?        @relation(fields: [userId], references: [id])
  userId       String?
}
